"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=require("rxjs"),r=require("rxjs/operators"),a=require("ts-action"),i=require("reselect");(e=exports.FlattenOperator||(exports.FlattenOperator={})).switchMap="switchMap",e.mergeMap="mergeMap",e.concatMap="concatMap",e.exhaustMap="exhaustMap";const p=e=>null!==e&&"object"==typeof e,o=t.pipe(r.catchError(e=>t.of(e))),s=e=>e.pipe(o),n=e=>t.isObservable(e)?e:e instanceof Promise?t.from(e):t.of(e);function c([e,t,a]){return r.scan((function(e,r){return a.length>0?a.reduce((e,t)=>(...r)=>e(t(...r)))(t)(e,r):t(e,r)}),e)}const u={switchMap:r.switchMap,mergeMap:r.mergeMap,concatMap:r.concatMap,exhaustMap:r.exhaustMap};
/**
 * Reactive state container based on RxJS (https://rxjs.dev/)
 *
 * @class AsyncStore<State, ActionsUnion>
 *
 * @type State - application state interface
 * @type ActionsUnion - type union of all the actions
 */
class f{
/**
     * Default configuration
     *
     * @param {Object} config
     *  {
     *     reducer$: of(reducer({})),
     *     actionStream$: EMPTY, // if not defined, no actions will be dispatched in the store
     *     initialState$: of({}),
     *     middleware$: of([]),
     *     destroy$: NEVER // if not defined, the state subscription will live forever
     *  }
     *
     * @param {Object} options
     *  {
     *     actionFop: FlattenOps.concatMap, // Flatten operator for actions's stream.
     *     stateFop: FlattenOps.switchMap // Flatten operator for state's stream.
     *     windowTime: undefined //Maximum time length of the replay buffer in milliseconds.
     *     bufferSize: 1 //Maximum element count of the replay buffer.
     *  }
     */
constructor(e,a){this.config=e,this.options=a,this._dispatch$=new t.Subject;const{reducer$:i,actions$:f,actionStream$:l,middleware$:h,initialState$:d,destroy$:$,flattenState$:m,shareReplayConfig:x}=function(e={},a={},i){const c=e&&e.reducer$&&e.reducer$.pipe(o)||t.of((e,t)=>e),f=new t.Subject,l=(e&&e.initialState$&&e.initialState$.pipe(o)||t.of({})).pipe(r.share()),h=e&&e.middleware$&&e.middleware$.pipe(o)||t.of([]),d=e&&e.destroy$&&e.destroy$.pipe(o)||t.NEVER,$=u[a&&a.actionFlatOp||exports.FlattenOperator.concatMap],m=u[a&&a.stateFlatOp||exports.FlattenOperator.switchMap],x=a&&a.bufferSize||1,S=a&&a.windowTime;return{reducer$:c,actions$:f,actionStream$:a=>t.merge(e&&e.actionStream$&&e.actionStream$.pipe(o)||t.EMPTY,i).pipe(r.filter(p),r.map(n),$(s),r.tap(f),a,r.map(n)),initialState$:l,middleware$:h,destroy$:d,flattenState$:e=>e.pipe(m(s),r.map(n),m(s)),shareReplayConfig:{refCount:!1,bufferSize:x,windowTime:S}}}(this.config,this.options,this._dispatch$);this.state$=t.combineLatest(d,i,h).pipe(r.map(c),r.concatMap(l),r.startWith(d),m,r.takeUntil($),r.shareReplay(x)),this.state$.subscribe(),this.actions$=f.pipe(r.shareReplay(x))}dispatch(e){this._dispatch$.next(e)}}Object.keys(a).forEach((function(e){"default"!==e&&Object.defineProperty(exports,e,{enumerable:!0,get:function(){return a[e]}})})),Object.keys(i).forEach((function(e){"default"!==e&&Object.defineProperty(exports,e,{enumerable:!0,get:function(){return i[e]}})})),exports.Store=f,exports.catchErr=o,exports.createStore=function(e={},t={}){return new f(e,t)}
/**
 *
 * @param mapFn - a function to map a state with
 * @returns {MiddlewareFn} MiddlewareFn<State>
 *
 * PS - previous state
 * NS - next state
 */,exports.filterA=e=>t=>(r,a)=>e(a)?t(r,a):r
/**
 * Reduce into state
 * @param reduceFn - a function to reduce the state and IAction together
 * @returns {MiddlewareFn} MiddlewareFn<State, IActionsUnion>
 *
 * PS - previous state
 * NS - next state
 */,exports.filterNS=e=>t=>(r,a)=>{const i=t(r,a);return e(i)?i:r}
/**
 *
 * @param filterFn - a function to filter an IAction with
 * @returns {MiddlewareFn} MiddlewareFn<State, IActionsUnion>
 */,exports.filterPS=e=>t=>(r,a)=>e(r)?t(r,a):r,exports.mapA=e=>t=>(r,a)=>t(r,e(a))
/**
 *
 * @param filterFn - a function to filter a state with
 * @returns {MiddlewareFn} MiddlewareFn<State>
 *
 * PS - previous state
 * NS - next state
 */,exports.mapNS=e=>t=>(r,a)=>e(t(r,a))
/**
 *
 * @param mapFn - a function to map an IAction with
 * @returns {MiddlewareFn} MiddlewareFn<State, IActionsUnion>
 */,exports.mapPS=e=>t=>(r,a)=>t(e(r),a),exports.mapToObservable=n,exports.reduceA=e=>t=>(r,a)=>t(r,e(r,a)),exports.reduceNS=e=>t=>(r,a)=>e(t(r,a),a)
/**
 *
 * Reduce into IAction
 * @param reduceFn - a function to reduce the state and IAction together
 * @returns {MiddlewareFn} MiddlewareFn<State, IActionsUnion>
 */,exports.reducePS=e=>t=>(r,a)=>t(e(r,a),a);
