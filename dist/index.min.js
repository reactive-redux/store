"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=require("rxjs"),a=require("rxjs/operators");(e=exports.FlattenOperator||(exports.FlattenOperator={})).switchMap="switchMap",e.mergeMap="mergeMap",e.concatMap="concatMap",e.exhaustMap="exhaustMap";const r=e=>null!==e&&"object"==typeof e,p=t.pipe(a.catchError(e=>t.of(e))),i=e=>e.pipe(p),s=e=>t.isObservable(e)?e:e instanceof Promise?t.from(e):t.of(e);function o([e,t,r]){return a.scan((function(e,a){return r.length>0?r.reduce((e,t)=>(...a)=>e(t(...a)))(t)(e,a):t(e,a)}),e)}const c={switchMap:a.switchMap,mergeMap:a.mergeMap,concatMap:a.concatMap,exhaustMap:a.exhaustMap};
/**
 * Reactive state container based on RxJS (https://rxjs.dev/)
 *
 * @class AsyncStore<State, ActionsUnion>
 *
 * @type State - application state interface
 * @type ActionsUnion - type union of all the actions
 */
class n{
/**
     * Default configuration
     *
     * @param {Object} config
     *  {
     *     reducer$: of(reducer({})),
     *     actionStream$: EMPTY, // if not defined, no actions will be dispatched in the store
     *     initialState$: of({}),
     *     middleware$: of([]),
     *     destroy$: NEVER // if not defined, the state subscription will live forever
     *  }
     *
     * @param {Object} options
     *  {
     *     actionFop: FlattenOps.concatMap, // Flatten operator for actions's stream.
     *     stateFop: FlattenOps.switchMap // Flatten operator for state's stream.
     *     windowTime: undefined //Maximum time length of the replay buffer in milliseconds.
     *     bufferSize: 1 //Maximum element count of the replay buffer.
     *  }
     */
constructor(e,n){this.config=e,this.options=n,this._dispatch$=new t.Subject;const{reducer$:u,actions$:l,actionStream$:h,middleware$:$,initialState$:d,destroy$:f,flattenState$:m,shareReplayConfig:x}=function(e={},o={},n){const u=e&&e.reducer$&&e.reducer$.pipe(p)||t.of((e,t)=>e),l=new t.Subject,h=(e&&e.initialState$&&e.initialState$.pipe(p)||t.of({})).pipe(a.share()),$=e&&e.middleware$&&e.middleware$.pipe(p)||t.of([]),d=e&&e.destroy$&&e.destroy$.pipe(p)||t.NEVER,f=c[o&&o.actionFlatOp||exports.FlattenOperator.concatMap],m=c[o&&o.stateFlatOp||exports.FlattenOperator.switchMap],x=o&&o.bufferSize||1,S=o&&o.windowTime;return{reducer$:u,actions$:l,actionStream$:o=>t.merge(e&&e.actionStream$&&e.actionStream$.pipe(p)||t.EMPTY,n).pipe(a.filter(r),a.map(s),f(i),a.tap(l),o,a.map(s)),initialState$:h,middleware$:$,destroy$:d,flattenState$:e=>e.pipe(m(i),a.map(s),m(i)),shareReplayConfig:{refCount:!1,bufferSize:x,windowTime:S}}}(this.config,this.options,this._dispatch$);this.state$=t.combineLatest(d,u,$).pipe(a.map(o),a.concatMap(h),a.startWith(d),m,a.takeUntil(f),a.shareReplay(x)),this.state$.subscribe(),this.actions$=l.pipe(a.shareReplay(x))}dispatch(e){this._dispatch$.next(e)}}exports.Store=n,exports.catchErr=p,exports.createStore=function(e={},t={}){return new n(e,t)}
/**
 *
 * @param mapFn - a function to map a state with
 * @returns {MiddlewareFn} MiddlewareFn<State>
 *
 * PS - previous state
 * NS - next state
 */,exports.filterA=e=>t=>(a,r)=>e(r)?t(a,r):a
/**
 * Reduce into state
 * @param reduceFn - a function to reduce the state and IAction together
 * @returns {MiddlewareFn} MiddlewareFn<State, IActionsUnion>
 *
 * PS - previous state
 * NS - next state
 */,exports.filterNS=e=>t=>(a,r)=>{const p=t(a,r);return e(p)?p:a}
/**
 *
 * @param filterFn - a function to filter an IAction with
 * @returns {MiddlewareFn} MiddlewareFn<State, IActionsUnion>
 */,exports.filterPS=e=>t=>(a,r)=>e(a)?t(a,r):a,exports.mapA=e=>t=>(a,r)=>t(a,e(r))
/**
 *
 * @param filterFn - a function to filter a state with
 * @returns {MiddlewareFn} MiddlewareFn<State>
 *
 * PS - previous state
 * NS - next state
 */,exports.mapNS=e=>t=>(a,r)=>e(t(a,r))
/**
 *
 * @param mapFn - a function to map an IAction with
 * @returns {MiddlewareFn} MiddlewareFn<State, IActionsUnion>
 */,exports.mapPS=e=>t=>(a,r)=>t(e(a),r),exports.mapToObservable=s,exports.reduceA=e=>t=>(a,r)=>t(a,e(a,r)),exports.reduceNS=e=>t=>(a,r)=>e(t(a,r),r)
/**
 *
 * Reduce into IAction
 * @param reduceFn - a function to reduce the state and IAction together
 * @returns {MiddlewareFn} MiddlewareFn<State, IActionsUnion>
 */,exports.reducePS=e=>t=>(a,r)=>t(e(a,r),r);
