"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=require("reselect"),r=require("rxjs"),a=require("rxjs/operators"),o=require("ts-action");(e=exports.FlattenOperator||(exports.FlattenOperator={})).switchMap="switchMap",e.mergeMap="mergeMap",e.concatMap="concatMap",e.exhaustMap="exhaustMap";const i=e=>null!==e&&"object"==typeof e,p=r.pipe(a.catchError(e=>r.of(e))),c=e=>e.pipe(p),n=e=>r.isObservable(e)?e:e instanceof Promise?r.from(e):r.of(e);function s([e,t,r]){return a.scan((function(e,a){return r.length>0?r.reduce((e,t)=>(...r)=>e(t(...r)))(t)(e,a):t(e,a)}),e)}const u={switchMap:a.switchMap,mergeMap:a.mergeMap,concatMap:a.concatMap,exhaustMap:a.exhaustMap};
/**
 * Reactive state container based on RxJS (https://rxjs.dev/)
 *
 * @class AsyncStore<State, ActionsUnion>
 *
 * @type State - application state interface
 * @type ActionsUnion - type union of all the actions
 */
class l{
/**
     * Default configuration
     *
     * @param {Object} config
     *  {
     *     reducer$: of(reducer({})),
     *     actionStream$: EMPTY, // if not defined, no actions will be dispatched in the store
     *     initialState$: of({}),
     *     middleware$: of([]),
     *     destroy$: NEVER // if not defined, the state subscription will live forever
     *  }
     *
     * @param {Object} options
     *  {
     *     actionFop: FlattenOps.concatMap, // Flatten operator for actions's stream.
     *     stateFop: FlattenOps.switchMap // Flatten operator for state's stream.
     *     windowTime: undefined //Maximum time length of the replay buffer in milliseconds.
     *     bufferSize: 1 //Maximum element count of the replay buffer.
     *  }
     */
constructor(e,t){this.config=e,this.options=t;const{reducer$:l,actions$:f,actionStream$:d,middleware$:m,initialState$:x,destroy$:S,flattenState$:$,shareReplayConfig:h}=function(e={},t={}){const s=e&&e.reducer$&&e.reducer$.pipe(p)||r.of(o.reducer({})),l=new r.Subject,f=(e&&e.initialState$&&e.initialState$.pipe(p)||r.of({})).pipe(a.share()),d=e&&e.middleware$&&e.middleware$.pipe(p)||r.of([]),m=e&&e.destroy$&&e.destroy$.pipe(p)||r.NEVER,x=u[t&&t.actionFlatOp||exports.FlattenOperator.concatMap],S=u[t&&t.stateFlatOp||exports.FlattenOperator.switchMap],$=t&&t.bufferSize||1,h=t&&t.windowTime;return{reducer$:s,actions$:l,actionStream$:t=>(e&&e.actionStream$&&e.actionStream$.pipe(p)||r.EMPTY).pipe(a.filter(i),a.map(n),x(c),a.tap(l),t,a.map(n)),initialState$:f,middleware$:d,destroy$:m,flattenState$:e=>e.pipe(S(c),a.map(n),S(c)),shareReplayConfig:{refCount:!1,bufferSize:$,windowTime:h}}}(this.config,this.options);this.state$=r.combineLatest(x,l,m).pipe(a.map(s),a.concatMap(d),a.startWith(x),$,a.takeUntil(S),a.shareReplay(h)),this.state$.subscribe(),this.actions$=f.pipe(a.shareReplay(h))}}Object.keys(o).forEach((function(e){"default"!==e&&Object.defineProperty(exports,e,{enumerable:!0,get:function(){return o[e]}})})),Object.defineProperty(exports,"createSelector",{enumerable:!0,get:function(){return t.createSelector}}),Object.defineProperty(exports,"createSelectorCreator",{enumerable:!0,get:function(){return t.createSelectorCreator}}),Object.defineProperty(exports,"createStructuredSelector",{enumerable:!0,get:function(){return t.createStructuredSelector}}),Object.defineProperty(exports,"defaultMemoize",{enumerable:!0,get:function(){return t.defaultMemoize}}),exports.Store=l,exports.catchErr=p,exports.createStore=function(e={},t={}){return new l(e,t)}
/**
 *
 * @param mapFn - a function to map a state with
 * @returns {MiddlewareFn} MiddlewareFn<State>
 *
 * PS - previous state
 * NS - next state
 */,exports.filterA=e=>t=>(r,a)=>e(a)?t(r,a):r
/**
 * Reduce into state
 * @param reduceFn - a function to reduce the state and action together
 * @returns {MiddlewareFn} MiddlewareFn<State, ActionsUnion>
 *
 * PS - previous state
 * NS - next state
 */,exports.filterNS=e=>t=>(r,a)=>{const o=t(r,a);return e(o)?o:r}
/**
 *
 * @param filterFn - a function to filter an action with
 * @returns {MiddlewareFn} MiddlewareFn<State, ActionsUnion>
 */,exports.filterPS=e=>t=>(r,a)=>e(r)?t(r,a):r,exports.mapA=e=>t=>(r,a)=>t(r,e(a))
/**
 *
 * @param filterFn - a function to filter a state with
 * @returns {MiddlewareFn} MiddlewareFn<State>
 *
 * PS - previous state
 * NS - next state
 */,exports.mapNS=e=>t=>(r,a)=>e(t(r,a))
/**
 *
 * @param mapFn - a function to map an action with
 * @returns {MiddlewareFn} MiddlewareFn<State, ActionsUnion>
 */,exports.mapPS=e=>t=>(r,a)=>t(e(r),a),exports.mapToObservable=n,exports.reduceA=e=>t=>(r,a)=>t(r,e(r,a)),exports.reduceNS=e=>t=>(r,a)=>e(t(r,a),a)
/**
 *
 * Reduce into action
 * @param reduceFn - a function to reduce the state and action together
 * @returns {MiddlewareFn} MiddlewareFn<State, ActionsUnion>
 */,exports.reducePS=e=>t=>(r,a)=>t(e(r,a),a);
